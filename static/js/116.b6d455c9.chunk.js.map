{"version":3,"file":"static/js/116.b6d455c9.chunk.js","mappings":"+SACAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAM,mCAICC,EAAc,mCAAG,oGACLF,EAAAA,EAAAA,IAAA,sCAAyCC,IADpC,cACtBE,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qDAOdC,EAAc,mCAAG,WAAMC,GAAN,uFACLP,EAAAA,EAAAA,IAAA,iBACXO,EADW,oBACQN,EADR,oBADK,cACtBE,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDASdI,EAAU,mCAAG,WAAMD,GAAN,uFACDP,EAAAA,EAAAA,IAAA,iBACXO,EADW,4BACgBN,EADhB,oBADC,cAClBE,EADkB,yBAIjBA,EAASC,KAAKK,MAJG,2CAAH,sDASVC,EAAa,mCAAG,WAAMH,GAAN,uFACJP,EAAAA,EAAAA,IAAA,iBACXO,EADW,4BACgBN,EADhB,oBADI,cACrBE,EADqB,yBAIpBA,EAASC,KAAKC,SAJM,2CAAH,sDASbM,EAAW,mCAAG,WAAMC,GAAN,uFACFZ,EAAAA,EAAAA,IAAA,8BACEY,EADF,oBACoBX,EADpB,wCADE,cACnBE,EADmB,yBAIlBA,EAASC,KAAKC,SAJI,2CAAH,qD,4LCvCXQ,EAAoBC,EAAAA,GAAAA,QAAH,uLAUjBC,EAAcD,EAAAA,GAAAA,GAAH,uG,SCSxB,EAjBmB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACL,EAAD,WACE,SAACE,EAAD,UACGC,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAxC,SACGG,EAAMK,SAFFL,EAAME,GADA,OAUxB,ECjBYI,EAAcZ,EAAAA,GAAAA,KAAH,0GAOXa,EAAQb,EAAAA,GAAAA,MAAH,6IASLc,EAASd,EAAAA,GAAAA,OAAH,wKCyCnB,EApDe,WAAO,IAAD,EACnB,GAAsCe,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMtB,EAAM,UAAGqB,EAAaE,IAAI,gBAApB,QAAgC,GAqC5C,OA1BAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,gHAE2BzB,EAAAA,EAAAA,IAAYC,GAFvC,UAEUT,EAFV,QAGUkC,EAAMlC,EAASgB,KAAI,SAAAmB,GAAE,MAAK,CAC9Bb,MAAOa,EAAGb,MACVH,GAAIgB,EAAGhB,GAFkB,MAIhBe,EAAIE,OAAS,GACtBR,EAAeM,GAEE,IAAfA,EAAIE,OAVZ,yCAWaC,IAAAA,OAAAA,KACL,oEAZR,yDAgBIA,IAAAA,OAAAA,QACE,uDAjBN,2DAFc,sBACC,KAAX5B,GADU,mCAuBd6B,EACD,GAAE,CAAC7B,KAGF,6BACE,UAACc,EAAD,CAAagB,SAnCI,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cACjBZ,EAAgB,CAAEa,MAAOF,EAAKG,SAAS5B,MAAM6B,MAAMC,SACnDL,EAAKM,OACN,EA8BG,WACE,SAACxB,EAAD,CAAOyB,KAAK,OAAOC,YAAY,kBAAkBC,KAAK,WACtD,SAAC1B,EAAD,CAAQwB,KAAK,SAAb,uBAEDtB,IAAe,SAAC,EAAD,CAAYd,OAAQc,MAGzC,C","sources":["components/Api/Api.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/Pages/Movies/Movies.styled.js","components/Pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst KEY = '774e1d28d884f123afe2adc71c6f8534';\n\n// список найпопулярніших фільмів на гол. стор.\n\nexport const resultMovieDay = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return response.data.results;\n};\n\n//  Повна інформація про фільм \n\nexport const resultOneMovie = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// інформація про акторс. склад \n\nexport const resultCast = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n//  огляди \n\nexport const resultReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n\n// пошук фільму за ключовим словом \n\nexport const resultQuery = async filter => {\n  const response = await axios.get(\n    `/search/movie?query=${filter}&api_key=${KEY}&language=en-US&include_adult=false`\n  );\n  return response.data.results;\n};","import styled from 'styled-components';\n\nexport const WrapperMoviesList = styled.section`\n  width: 1280px;\n  margin: 0 auto;\n  padding-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const WrapperList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 18px;\n`;","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { WrapperMoviesList, WrapperList } from './MoviesList.styled';\n\nconst MoviesList = ({ titles }) => {\n  const location = useLocation();\n  return (\n    <WrapperMoviesList>\n      <WrapperList>\n        {titles.map(movie => (\n          <li key={movie.id}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </li>\n        ))}\n      </WrapperList>\n    </WrapperMoviesList>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  titles: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};","import styled from 'styled-components';\n\nexport const WrapperForm = styled.form`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  padding-top: 20px;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n  ::placeholder {\n    font-size: 16px;\n  }\n`;\n\nexport const Button = styled.button`\n  width: 80px;\n  height: 37px;\n  padding: 5px;\n  font-weight: 500;\n  font-size: 16px;\n  border-radius: 4px;\n  background-color: #c7d0d9;\n`;","import { resultQuery } from 'components/Api/Api';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { Button, Input, WrapperForm } from './Movies.styled';\n\nconst Movies = () => {\n  const [namesMovies, setNamesMovies] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const filter = searchParams.get('query') ?? '';\n\n\n\n  const onFormSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    setSearchParams({ query: form.elements.movie.value.trim() });\n    form.reset();\n  };\n\n  useEffect(() => {\n    if (filter === '') return;\n    async function getSearchResult() {\n      try {\n        const response = await resultQuery(filter);\n        const arr = response.map(el => ({\n          title: el.title,\n          id: el.id,\n        }));\n        if (arr && arr.length > 0) {\n          setNamesMovies(arr);\n        }\n        if (arr.length === 0) {\n          return Notiflix.Notify.info(\n            'Sorry, the movie you requested was not found. Please try again.'\n          );\n        }\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Sorry, something went wrong, please try again later'\n        );\n      }\n    }\n    getSearchResult();\n  }, [filter]);\n\n  return (\n    <main>\n      <WrapperForm onSubmit={onFormSubmit}>\n        <Input type=\"text\" placeholder=\"Search movie...\" name=\"movie\" />\n        <Button type=\"submit\">Search</Button>\n      </WrapperForm>\n      {namesMovies && <MoviesList titles={namesMovies} />}\n    </main>\n  );\n};\n\nexport default Movies;"],"names":["axios","KEY","resultMovieDay","response","data","results","resultOneMovie","movieId","resultCast","cast","resultReviews","resultQuery","filter","WrapperMoviesList","styled","WrapperList","titles","location","useLocation","map","movie","to","id","state","from","title","WrapperForm","Input","Button","useState","namesMovies","setNamesMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","arr","el","length","Notiflix","getSearchResult","onSubmit","evt","preventDefault","form","currentTarget","query","elements","value","trim","reset","type","placeholder","name"],"sourceRoot":""}